//Pinout Definitions---------------------------------------------
#define HAPTIC			    1  	// 13, IO, out. Formally HAPTIC_PWM. ACTIVE LOW
#define BUCK_ON				40	// 17, IO; out - LED 1
#define CURR_SET_PWM		11 // pin 31 temporarily      //11	// 19, IO, PWM; out 
#define TX_EN				25 //tempoarily LED1 (13)     //31	// 23, IO; out - LED 2
#define MOD				    14	// 27, IO, FREQ; out 
#define RX_EN				17	// 28, IO; out - LED 3
#define BLINK				12	// 29, IO, interrupt; in - Button 1
#define ENV_ADC				3 	// 10, ADC; in
#define BAT_ADC				31	// 12, ADC; in
#define PBSTAT				28//28	// 36, IO; in
#define CHRG				30	// 38, IO; in
#define BLK_THRES_PWM		29	// 39, IO, PWM; out
#define SLOPE_P             27    // 40, IO, in
#define SLOPE_N             26    // 45, IO, in

//#define BTN_1 11 //button 1
//#define BTN_2  12 //button 2
//#define BTN_3 	24 //button 3 --> represent power button

#define DIGITAL_IN       1
#define DIGITAL_OUT      2
#define ANALOG_IN        3
#define LOW              0
#define HIGH             1
#define PWM              2
#define FREQ             3

//Main FSM State Definitions

#define TURN_OFF           0
#define TURN_ON            1
#define BLE_CONNECT        2
#define PROXIMITY_DETECT   3
#define CALIBRATION        4
#define CAL_PASS           5
#define CAL_FAIL           6
#define MODE_LP            7
#define MODE_HP            8
#define CHANGE_MODE        9

#define TURN_OFF           0
#define TURN_ON            1
#define BLE_CONNECT        2
#define PROXIMITY_DETECT   3
#define CALIBRATION        4
#define CAL_PASS           5
#define CAL_FAIL           6
#define MODE_LP            7
#define MODE_HP            8
#define CHANGE_MODE        9

#define UUID_BATTERY_SERVICE                        0x180F
#define UUID_BAT_LEVEL_CHAR							0x2A19
//Bluetooth Definitions
#define ADV_TIMEOUT		   60000 //ms - how long before advertising timesout if no pair
#define ADV_INTERVAL       50 //ms note higher number means lower current consumption - time between advertisements
#define ADV_APPEARANCE     1
#define DEVICENAME			"Laird BL653 Bioblink"
#define APPEARANCE         448 //no idea waht this is , just copied from bps>blood.presure.custom. Took value as 448 for eye glasses 

//Minimum acceptable connection interval (0.5 seconds)
#define MIN_CONN_INTERVAL                           80000
//Maximum acceptable connection interval (1 second).
#define MAX_CONN_INTERVAL                           100000
//Slave latency -- number of conn events that can be missed
//Effective Conn interval will be (SLAVE_LATENCY+1)*ACTUAL_CONN_INTERVAL
#define SLAVE_LATENCY                               1
//Connection supervisory timeout (4 seconds) - max 32 seconds
#define CONN_SUP_TIMEOUT                            4000000

//BLE EVENT MSG IDs
#define BLE_EVBLEMSGID_CONNECT                      0   //msgCtx = connection handle
#define BLE_EVBLEMSGID_DISCONNECT                   1   //msgCtx = connection handle
#define BLE_EVBLEMSGID_SERVICE_ERROR                4   //msgCtx = resultcode
#define BLE_EVBLEMSGID_NEW_BOND                     10  //msgCtx = connection handle
#define BLE_EVBLEMSGID_CONN_PARMS_UPDATE            14  //msgCtx = connection handle
#define BLE_EVBLEMSGID_CONN_PARMS_UPDATE_FAIL       15  //msgCtx = connection handle
#define BLE_EVBLEMSGID_CONN_TO_BONDED_MASTER        16  //msgCtx = connection handle
#define BLE_EVBLEMSGID_UPDATED_BOND                 17  //msgCtx = connection handle
#define BLE_EVBLEMSGID_ENCRYPTED                    18  //msgCtx = connection handle
#define BLE_EVBLEMSGID_POWER_FAILURE_WARNING        19  //msgCtx = current supply voltage
#define BLE_EVBLEMSGID_UNENCRYPTED                  20  //msgCtx = connection handle
#define BLE_EVBLEMSGID_DEVICENAME_WRITE             21  //msgCtx = connection handle

#define BLE_CHAR_PROPERTIES_BROADCAST               0x01
#define BLE_CHAR_PROPERTIES_READ                    0x02
#define BLE_CHAR_PROPERTIES_WRITE_WO_RESPONSE       0x04
#define BLE_CHAR_PROPERTIES_WRITE                   0x08
#define BLE_CHAR_PROPERTIES_NOTIFY                  0x10
#define BLE_CHAR_PROPERTIES_INDICATE                0x20
#define BLE_CHAR_PROPERTIES_AUTH_SIGNED_WR          0x40
#define BLE_CHAR_PROPERTIES_RELIABLE_WRITE          0x80

//Set BLE_DISCOVERABILITY_NONE if whitelist is enabled in BleAdvertStart()
//as the 4.0 spec says if whitelist is enabled then discoverability is not allowed
#define BLE_DISCOVERABILITY_NONE                    0
#define BLE_DISCOVERABILITY_LIMITED                 1
#define BLE_DISCOVERABILITY_GENERAL                 2
#define BLE_DISCOVERABILITY_BOTH                    3

#define DEVICENAME_WRITABLE                   		1
#define DISCOVERY_MODE                              BLE_DISCOVERABILITY_GENERAL
#define MAX_DEVNAME_CHRS                            10
#define LT_BASE_UUID                         "\56\9a\00\00\b8\7f\49\0c\92\cb\11\ba\5e\a5\16\7c\"
//Global Variables

dim SAMPLE_RATE : SAMPLE_RATE = 500
dim rc      //Result code
DIM CURRENT_STATE as integer : CURRENT_STATE = 0   //default state is TURN_ON on powerup
DIM HW_Debug : HW_Debug = 0        //Flag to bypass any BLE comms and calibration. When '1' Go straight to MODE_LP with default values
DIM MIN_TIME_BTWN_BLINKS : MIN_TIME_BTWN_BLINKS = 2000 //2000 for testing with the devkit, 500 in practice  (?Confirm with Shanes graph)

//CALIBRATION MODE GLOBAL VARIABLES 
DIM Cal_Fail_Count : Cal_Fail_Count = 0 //failure counter.So it dosen't endlessly 'calibrate' if the proximity detection produces false positive/
DIM CALIBRATION_STATUS : CALIBRATION_STATUS = 1

//LP MODE GLOBAL VARIABLES
DIM BLINK_TIME : BLINK_TIME = 0 //used in LP MODE to determine last blink time
DIM TARGET_BLINK_INTERVAL : TARGET_BLINK_INTERVAL = 10000 //in ms, currently set to 10 seconds
DIM LP_MODE_HOUSEKEEPING_INTERVAL : LP_MODE_HOUSEKEEPING_INTERVAL = 30000 //in ms, every 30 seconds

//CHANGE MODE STATE GLOBAL VARIABLES 
DIM CHANGE_MODE_Flag	  //flag to determine button handler function
DIM CHANGE_MODE_Counter   //counts buttons presses to change to respective mode

//BLE CONNECT GLOBAL VARIABLES
DIM STAND_ALONE : STAND_ALONE = 0 //if BLE Connection Fails, Stand alone will make Proximity Detect use default values
DIM addr$ : addr$ =""
DIM adRpt$ as string :adRpt$ = "" //contains most recent advertise report
DIM scnRpt$ as string : scnRpt$ = "" //contains most recent scan report
dim advappearance : advappearance = ADV_APPEARANCE
dim advFlags : advFlags = DISCOVERY_MODE
dim dn$ : dn$ = DEVICENAME
dim hSvc  //service handler
dim hSerBat //gatt service 
dim hcharADC ///gatt server adc characteristic handle
dim nTxBufs //number of free tx buffers for notification

dim start_tick
dim elapse_ms
dim adc
dim V_BAT as FLOAT
dim V_BAT$ as string


//Functions--------------------------------------------------------------

sub AssertRC(byval rc as integer,byval tag as integer)
  if (rc!=0) then
    print "Failed with ";integer.h' rc;" at tag ";tag;"\n"
  endif
endsub

sub DELAY_MS(BYVAL DELAY_TIME AS INTEGER)   //delay N milliseconds.

    dim START_TIME 
    START_TIME = GETTICKCOUNT()  //Get initial tick in ms
	//print "\n"; START_TIME; "\n"
    dim END_TIME 
    END_TIME = START_TIME + DELAY_TIME      //Add delay to current tick

    WHILE GETTICKCOUNT() < END_TIME            //Waste power until END_TIME reached
		//package
		//send data
		//house keeping related items
    ENDWHILE 
	//print "\n leave time: "; GETTICKCOUNT(); "\n"
endsub

sub HAPTICS(BYVAL PATTERN_TYPE AS INTEGER)   //input an integer to select the haptic pattern

    SELECT PATTERN_TYPE

        CASE 1     
            GPIOWRITE(HAPTIC,0)       //HAPTIC is active low!!!!
            DELAY_MS(200)
            GPIOWRITE(HAPTIC,1)
            DELAY_MS(200)
            GPIOWRITE(HAPTIC,0)
            DELAY_MS(200)
            GPIOWRITE(HAPTIC,1)
            DELAY_MS(400)
            GPIOWRITE(HAPTIC,0)
            DELAY_MS(400)
            GPIOWRITE(HAPTIC,1)
            PRINT "\n Haptics 1 finished"

        CASE 2
            GPIOWRITE(HAPTIC,0)
            DELAY_MS(200)
            GPIOWRITE(HAPTIC,1)
            DELAY_MS(200)
            GPIOWRITE(HAPTIC,0)
            DELAY_MS(400)
            GPIOWRITE(HAPTIC,1)
            DELAY_MS(400)
            GPIOWRITE(HAPTIC,0)
            DELAY_MS(200)
            GPIOWRITE(HAPTIC,1)
            DELAY_MS(200)
            GPIOWRITE(HAPTIC,0)
            DELAY_MS(400)
            GPIOWRITE(HAPTIC,1)
            PRINT "\n Haptics 2 finished"

            //add cases as required
                 
        CASE ELSE     
            PRINT "\n Not a valid haptics pattern"

    ENDSELECT

endsub

function BAT_LEVEL()   //Returns battery voltage in mV
    dim RAW   //raw 12bit ADC reading
    dim x     //Counter variable

    DO
        x = x + 1 
        RAW = GPIOREAD(BAT_ADC) + RAW   // Accumulate 15 12bit samples

    DOWHILE x < 15

    RAW = RAW/15  //Average the samples

    // 1/4 ADC scaling, 0.6V reference -> RAW = Vin * (Scaling/Reference) * 2^N
    dim V_BAT as FLOAT
    V_BAT = (RAW) / (4096*(0.25/0.6)) * 1000

    PRINT "\n V_BAT=";V_BAT
    
endfunc V_BAT

sub OPTICAL_TX(BYVAL CURRENT_SET_DC AS INTEGER)  //Starts optical TX. Input 0 to turn off. 

    dim TX_LIMIT
    TX_LIMIT = 50  //HARDCODE TO MAXIMUM EXPERIMENTAL PWM DUTYCYCLE THAT GIVES MAX ALLOWED CURRENT

    if (CURRENT_SET_DC <= TX_LIMIT)&(CURRENT_SET_DC != 0) then

        GPIOWRITE(CURR_SET_PWM,CURRENT_SET_DC)
        GPIOWRITE(TX_EN,HIGH)  //enable FE TX opamps + oscilator
        PRINT "\n TX ENABLED, DC SET: "; CURRENT_SET_DC
		DELAY_MS(32)

    elseif (CURRENT_SET_DC > TX_LIMIT)&(CURRENT_SET_DC != 0) then

        GPIOWRITE(CURR_SET_PWM,TX_LIMIT)
        GPIOWRITE(TX_EN,HIGH)  //enable FE TX opamps + oscilator
        PRINT "\n TX_LIMIT DC EXCEDED, set to max: "; TX_LIMIT
		DELAY_MS(32)

    elseif CURRENT_SET_DC == 0 then         //turn TX off

        GPIOWRITE(CURR_SET_PWM,0)
        GPIOWRITE(TX_EN,LOW)  //disable FE TX opamps + oscilator
        PRINT "\n TX SHUTDOWN"

    endif

endsub

sub CANCEL_ALL_TIMERS() //cancels all timers
	dim i : i = 0
	FOR i = 0 to 7
		TimerCancel(i)
	NEXT
	print "\n all 8 timers cancelled \n"
endsub

sub START_BLE_ADVERT()
	rc = BleAdvRptInit(adRpt$,advFlags,ADV_APPEARANCE,MAX_DEVNAME_CHRS)
	AssertRC(rc, 433)
	rc=BleScanRptInit(scnRpt$)
	//rc=BleAdvRptAppendAD(scnRpt$,0x09,dn$)
    AssertRC(rc,179)
	print "\n Advert report created with new values \n"
	rc = BleAdvRptAppendAD(scnRpt$,0x09,dn$)
	AssertRC(rc,179)
	rc = BleAdvRptAddUuid128(adRpt$,hSerBat)
	rc = BleAdvRptsCommit(adRpt$,scnRpt$)
	print "\n ADVRPT: ";adRpt$; "\n"
	print "\n SCRPT: "; scnRpt$; "\n"
	print "\n advert reports commited \n"
	
	
	print "\n BLE_CONNECT state start \n"
	IF BleAdvertStart(0,addr$,ADV_INTERVAL,ADV_TIMEOUT,0)==0 THEN
		PRINT "\nAdverts Started"
		PRINT "\nIf you search for Bluetooth devices on your device, you should see 'Laird BL653'"
	ELSE
		PRINT "\n\nAdvertisement not successful"
	ENDIF
endsub

sub IO_Config()

    DIM temp 
    DIM nfreq : nfreq = 10000
    DIM nresolution : nresolution = 100

    temp = GPIOSETFUNC(CURR_SET_PWM,DIGITAL_OUT,PWM)
    temp = GPIOCONFIGPWM(nfreq,nresolution)                      //10kHz 1:100 resolution current set PWM
    //To set duty cycle -> change TX current: GPIOWRITE(CURR_SET_PWM, 0 to N) where N = 1 to 100 or 10000?  

    temp = GPIOSETFUNC(HAPTIC,DIGITAL_OUT,HIGH)          //HAPTICS will just be on/off not PWM. Active low.
    temp = GPIOSETFUNC(BUCK_ON,DIGITAL_OUT,HIGH)         
    temp = GPIOSETFUNC(TX_EN,DIGITAL_OUT,LOW) 
    temp = GPIOSETFUNC(RX_EN,DIGITAL_OUT,LOW)
    temp = GPIOSETFUNC(MOD,DIGITAL_OUT,LOW)              //unused with FE v2.0, set as low digital output.
    temp = GPIOSETFUNC(BLK_THRES_PWM,DIGITAL_OUT,LOW)    //unused with FE v2.0, set as low digital output.

    temp = GPIOSETFUNC(BLINK,DIGITAL_IN,0)               //unused with FE v2.0, set as digital input.
    temp = GPIOSETFUNC(PBSTAT,DIGITAL_IN,0)
    temp = GPIOSETFUNC(CHRG,DIGITAL_IN,0)
    temp = GPIOSETFUNC(SLOPE_P,DIGITAL_IN,0)           //Add deep sleep wake?
    temp = GPIOSETFUNC(SLOPE_N,DIGITAL_IN,0)           
    
    temp = GPIOSETFUNCEX(ENV_ADC,ANALOG_IN,"\15\0A\0A")          
    temp = GPIOSETFUNCEX(BAT_ADC,ANALOG_IN,"\14\0C\28")

    PRINT "\n IO Configured"
    
    // Set ADC scaling so max analog voltage * Scaling < 0.6V (ADC reference)
    //0x16 1/6 scaling
    //0x15 1/5 scaling
    //0x14 1/4 scaling
    //0x13 1/3 scaling
    //0x12 1/2 scaling
    //0x11 1/1 scaling (Unity)
    //0x21 2/1 scaling
    //0x41 4/1 scaling
    
    //0x08 8-bit ADC resolution
    //0x0A 10-bit ADC resolution
    //0x0C 12-bit ADC resolution

    //0x03 3 microseconds Acquisition time
    //0x05 5 microseconds
    //0x0A 10 microseconds
    //0x0F 15 microseconds
    //0x14 20 microseconds
    //0x28 40 microseconds
    
endsub 

Sub CreateSvc()
    dim bseUuid$ : bseUuid$=LT_BASE_UUID
    //Laird Technologies Base UUID handle
    dim hBseUuid : hBseUuid=BleHandleUuid128(bseUuid$)
    //LED service UUID handle
    hSerBat=BleHandleUuidSibling(hBseUuid,UUID_BATTERY_SERVICE)

    dim dta$ : dta$="\00"
    dim rc2,rc3
	dim chprop
    //Create battery Service
    rc=BleServiceNew(1,hSerBat,hSvc)
    AssertRC(rc,0600)

    //Initialise GATT Client LEDs Characteristic - Notifyable, Readable
   // rc=BleCharNew(0x22, BleHandleUuidSibling(hBseUuid,(CLILEDS_CHAR_UUID)), BleAttrMetaData(1,0,2,1,rc2), BleAttrMetaData(1,1,1,1,rc3),0)
 //   AssertRC(rc,155) : AssertRC(rc2,1552)
  //  rc=BleCharCommit(hSvc,dta$,hCliLeds)
 //   AssertRC(rc,157)

    //Initialise GATT Server batt read / notify LEDs Characteristic - Read/Write
	chprop = BLE_CHAR_PROPERTIES_READ | BLE_CHAR_PROPERTIES_NOTIFY
    rc=BleCharNew(chprop, BleHandleUuidSibling(hBseUuid,(UUID_BAT_LEVEL_CHAR)), BleAttrMetaData(1,1,2,1,rc2),0,0)
    AssertRC(rc,0603) : AssertRC(rc2,0601) : AssertRC(rc3,0601)
    rc=BleCharCommit(hSvc,dta$,hcharADC)
    AssertRC(rc,0604)

    //Commit service to the GATT table
    rc=BleServiceCommit(hSvc)  
EndSub

function BLE_Config(BYVAL BLE_TimeOut AS INTEGER)

    TimerStart(0,180000,0)   //3 min search timer

    //configure BLE, check for saved MAC
    //if the timer times out, return a 0. BLE_TimeOut = 0 
	//exit state stop and reset timer

endfunc 1 

function Prox_Detect(BYVAL PROX_TimeOut AS INTEGER)

    TimerStart(1,60000,0)   //1 min promimity detection timeout timer

    //Look at DC values of ENV_IN with ADC
    //if the timer times out, return a 0. PROX_TimeOut = 0 
	//exit state stop and reset timer
    
endfunc 1 

function CHANGE_MODE_HNDL()
print "\n button is pressed onevent \n"

endfunc 1

function HNDLRBLEADVTIMEOUT()
	print "\n Advert stopped from timeout"
	print "\n Exiting..."
	//more advanced switches depending on timeout to be included
//	rc = BleDisconnect()
	rc = BleAdvertStop()
	
endfunc 1 //check if this should be 0


Function HndlrBleMsg(ByVal nMsgId, ByVal connHndl)
    if nMsgID==1 then
        print "\n\n-- Disconnected from client\n"
    elseif nMsgID==0 then
        print "\n-- Connected to client"
    endif
EndFunc 1

function BLEDISCONNECTHNDLR()
	rc = BleAdvertStop()
	rc = GpioUnbindEvent(1)
	CANCEL_ALL_TIMERS()
	print  "\n ble disconnected \n"

endfunc 1

function SLOPEPHANDLR()

		HAPTICS(1)
		print "\n slope p detected wooo \n"



endfunc 1

//Main Program-----------------------------------------------------------
'CreateSvc()
IO_Config()
dim dp : dp = 0
'BLETXPOWERSET(dp)
PRINT "\nTx power : desired= ";dp," "," actual= "; SysInfo(2008)
rc=BleGapSvcInit(dn$,DEVICENAME_WRITABLE,APPEARANCE,MIN_CONN_INTERVAL,MAX_CONN_INTERVAL,CONN_SUP_TIMEOUT,SLAVE_LATENCY)
START_BLE_ADVERT()
//TimerStart (0, 20000, 0)
//timerstart (1, 25, 1)
rc = GpioBindEvent(1,SLOPE_P,0)


HAPTICS(1)
DELAY_MS(2000)
OPTICAL_TX(40)
//HAPTICS(2)
//DELAY_MS(2000)
//onevent EVTMR0 CALL BLEDISCONNECTHNDLR
onevent evgpiochan1 CALL SLOPEPHANDLR

WAITEVENT 