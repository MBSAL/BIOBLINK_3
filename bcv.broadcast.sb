// Copyright (c) 2020, Laird Connectivity
//
// Permission to use, copy, modify, and/or distribute this software for any
// purpose with or without fee is hereby granted, provided that the above
// copyright notice and this permission notice appear in all copies.
//
// THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
// WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
// MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
// SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
// WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
// ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR
// IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
//
// SPDX-License-Identifier:ISC
//
// bcv.broadcast.characteristic.val
//
// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// +++++                                                                      ++
// +++++  When UwTerminal downloads the app it will store it as a filenname   ++
// +++++  which consists of all characters up to the first . and excluding it ++
// +++++                                                                      ++
// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//
// This sample app will encode the temperature data in the first 3 #defines
// below and broadcast it in an advert report. GATT Client can then read this
// temperature data without connecting to the module.
//
//******************************************************************************

//******************************************************************************
// Definitions
//******************************************************************************
#define TEMP_MANTISSA                        2711
#define TEMP_EXPONENT                        -2
#define UUID_HEALTH_THERMOMETER_SERVICE      0x1809

#define ENABLE_DEBUG_PRINTS                  1
#define BLE_DISCOVERABILITY_GENERAL          2
#define BLE_APPEARANCE                       0
#define MAX_DEVNAME_CHRS                     20
#define BLE_CHARVAL_AD_TAG                   0x16

#define ADV_SCAN_IND                         2
#define ADV_FILTERPOLICY_ANY                 0

        //Advertise interval
#define ADV_INTERVAL_MS                      250
        //Advertise timeout
#define ADV_TIMEOUT_MS                       0
        //Whitelist Policy in Adverts
#define ADV_WHITELIST_FILTER_POLICY          ADV_FILTERPOLICY_ANY


//******************************************************************************
// Library Import
//******************************************************************************

//******************************************************************************
// Global Variable Declarations
//******************************************************************************
dim rc         //Result code
dim devName$   //Device name
dim hChar      //Characteristic handle
dim hSvc       //Service handle

//******************************************************************************
// Function and Subroutine definitions
//******************************************************************************

//------------------------------------------------------------------------------
// For debugging
// --- rc = result code
// --- ln = line number
//------------------------------------------------------------------------------
Sub AssertRC(rc,ln)
    if rc!=0 then
        print "\nFail :";integer.h' rc;" at tag ";ln
    endif
EndSub


//------------------------------------------------------------------------------
// Register Error Handler as early as possible
//------------------------------------------------------------------------------
sub HandlerOnErr()
  if (ENABLE_DEBUG_PRINTS!=0) then
    print "\n OnErr - ";GetLastError();"\n"
  endif
endsub

onerror next HandlerOnErr


//------------------------------------------------------------------------------
// Initialise advert report and add characteristic value to it
//------------------------------------------------------------------------------
sub MakeAdvertRpts()
    dim tempVal$ //temporary value to hold Temperature svc UUID and Temperature Value
    dim advRpt$  //Advert report
    dim scnRpt$  //Empty scan report
	print "\n ADVRPT -1: ";advRpt$; "\n"
    rc=BleAdvRptInit(advRpt$, BLE_DISCOVERABILITY_GENERAL, BLE_APPEARANCE, MAX_DEVNAME_CHRS)
    AssertRC(rc, 105)

    //Encode temperature advert data
    rc=BleEncode16(tempVal$, UUID_HEALTH_THERMOMETER_SERVICE, 0)   //Encode temperature svc UUID from index 0 in tempVal$
    AssertRC(rc, 109)

    rc=BleEncodeFloat(tempVal$, TEMP_MANTISSA, TEMP_EXPONENT, 2)   //Encode temp (342 * 10^-1) as float from index 2 in tempVal$
    AssertRC(rc, 112)
    //Append temperature value to the advert report
    rc=BleAdvRptAppendAD(advRpt$, BLE_CHARVAL_AD_TAG, tempVal$)
    AssertRC(rc, 115)
	print "\n ADVRPT 0: ";advRpt$; "\n"
    print "\nService Data: "; StrHexize$(tempVal$)

    rc=BleAdvRptsCommit(advRpt$,scnRpt$)
    AssertRC(rc, 120)
endsub


//------------------------------------------------------------------------------
// This subroutine gets called first
//------------------------------------------------------------------------------
sub OnStartup()
    dim addr$    //Empty peer address

    MakeAdvertRpts()

    //Start advertising
    rc=BleAdvertStart(0, addr$, ADV_INTERVAL_MS, ADV_TIMEOUT_MS, 0)
    AssertRC(rc, 134)

    TimerStart(0,10000,1)
endsub


//******************************************************************************
// Handler definitions
//******************************************************************************
dim x : x = TEMP_MANTISSA
dim i : i = 0
function h()     //Incase you want to update the temperature periodically
    dim tempVal$ //temporary value to hold Temperature svc UUID and Temperature Value
    dim advRpt$  //Advert report
    dim scnRpt$  //Empty scan report
	
	print "\n ADVRPT "; i;": ";advRpt$; "\n"
    rc=BleAdvRptInit(advRpt$, BLE_DISCOVERABILITY_GENERAL, BLE_APPEARANCE, MAX_DEVNAME_CHRS)
    AssertRC(rc, 149)
	i = i + 1
	print "\n ADVRPT "; i;": ";advRpt$; "\n"
    //Encode temperature advert data
    rc=BleEncode16(tempVal$, UUID_HEALTH_THERMOMETER_SERVICE, 0)   //Encode temperature svc UUID from index 0 in tempVal$
    AssertRC(rc, 153)
	x = x + 20
    rc=BleEncodeFloat(tempVal$, x, TEMP_EXPONENT, 2)//Encode temp (342 * 10^-1) as float from index 2 in tempVal$
    AssertRC(rc, 155)
	i = i + 1	
    //Append temperature value to the advert report
    rc=BleAdvRptAppendAD(advRpt$, BLE_CHARVAL_AD_TAG, tempVal$)
    AssertRC(rc, 159)
	print "\n ADVRPT "; i;": ";advRpt$; "\n"
	print "\nFree space in adv report: "; BleAdvRptGetSpace(advRpt$); " bytes"
	print "\nFree space in scn report: "; BleAdvRptGetSpace(scnRpt$); " bytes"
    print "\nService Data: "; StrHexize$(tempVal$)

    rc=BleAdvRptsCommit(advRpt$,scnRpt$)
    AssertRC(rc, 164)
endfunc 1



//******************************************************************************
// Equivalent to main() in C
//******************************************************************************
onevent evtmr0 call h

OnStartup()

//------------------------------------------------------------------------------
// Wait for a synchronous event.
// An application can have multiple <WaitEvent> statements
//------------------------------------------------------------------------------
waitevent