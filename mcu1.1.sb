//Pinout Definitions---------------------------------------------
#define HAPTIC			    1  	// 13, IO, out. Formally HAPTIC_PWM. ACTIVE LOW
#define BUCK_ON				40	// 17, IO; out - LED 1
#define CURR_SET_PWM		11	// 19, IO, PWM; out 
#define TX_EN				25	// 23, IO; out - LED 2
#define MOD				    14	// 27, IO, FREQ; out 
#define RX_EN				17	// 28, IO; out - LED 3
#define BLINK				12	// 29, IO, interrupt; in - Button 1
#define ENV_ADC				3 	// 10, ADC; in
#define BAT_ADC				31	// 12, ADC; in
#define PBSTAT				24//28 'use 24 for button 3 for devkit purposes //28	// 36, IO; in
#define CHRG				30	// 38, IO; in
#define BLK_THRES_PWM		29	// 39, IO, PWM; out
#define SLOPE_P             27    // 40, IO, in
#define SLOPE_N             26    // 45, IO, in

//#define CHANGE_MODE_BTN 	24 //button 3 --> represent power button

#define DIGITAL_IN       1
#define DIGITAL_OUT      2
#define ANALOG_IN        3
#define LOW              0
#define HIGH             1
#define PWM              2
#define FREQ             3

//Main FSM State Definitions

#define TURN_OFF           0
#define TURN_ON            1
#define BLE_CONNECT        2
#define PROXIMITY_DETECT   3
#define CALIBRATION        4
#define CAL_PASS           5
#define CAL_FAIL           6
#define MODE_LP            7
#define MODE_HP            8
#define CHANGE_MODE        9

//Global Variables
dim SAMPLE_RATE : SAMPLE_RATE = 500
dim rc      //Result code
DIM CURRENT_STATE as integer
CURRENT_STATE = 9   //default state is TURN_ON on powerup

DIM HW_Debug : HW_Debug = 0        //Flag to bypass any BLE comms and calibration. When '1' Go straight to MODE_LP with default values

DIM Cal_Fail_Count : Cal_Fail_Count = 0 //failure counter.So it dosen't endlessly 'calibrate' if the proximity detection produces false positive/

DIM BLINK_TIME : BLINK_TIME = 0

DIM TARGET_BLINK_INTERVAL : TARGET_BLINK_INTERVAL = 10000 //in ms, currently set to 10 seconds

DIM LP_MODE_HOUSEKEEPING_INTERVAL : LP_MODE_HOUSEKEEPING_INTERVAL = 30000 //in ms, every 30 seconds

DIM CALIBRATION_STATUS : CALIBRATION_STATUS = 0

//CHANGE MODE STATE GLOBAL VARIABLES 
DIM CHANGE_MODE_elapseMS  //elapsed time since change_mode starting tick
DIM CHANGE_MODE_startTick //records the starting tick when Change_mode is pressed
DIM CHANGE_MODE_Flag	  //flag to determine button handler function
DIM CHANGE_MODE_Counter   //counts buttons presses to change to respective mode
DIM CHANGE_MODE_BTN_PRESS

//Specific Functions--------------------------------------------------------------

sub AssertRC(byval rc as integer,byval tag as integer)
  if (rc!=0) then
    print "Failed with ";integer.h' rc;" at tag ";tag;"\n"
  endif
endsub

sub DELAY_MS(BYVAL DELAY_TIME AS INTEGER)   //delay N milliseconds.

    dim START_TIME 
    START_TIME = GETTICKCOUNT()  //Get initial tick in ms
    dim END_TIME 
    END_TIME = START_TIME + DELAY_TIME      //Add delay to current tick

    WHILE GETTICKCOUNT() < END_TIME            //Waste power until END_TIME reached

    ENDWHILE 

endsub

function BAT_LEVEL()   //Returns battery voltage in mV
    dim RAW   //raw 12bit ADC reading
    dim x     //Counter variable

    DO
        x = x + 1 
        RAW = GPIOREAD(BAT_ADC) + RAW   // Accumulate 15 12bit samples

    DOWHILE x < 15

    RAW = RAW/15  //Average the samples

    // 1/4 ADC scaling, 0.6V reference -> RAW = Vin * (Scaling/Reference) * 2^N
    dim V_BAT as FLOAT
    V_BAT = (RAW) / (4096*(0.25/0.6)) * 1000

    PRINT "\n V_BAT=";V_BAT
    
endfunc V_BAT

sub IO_Config()

    DIM temp
	DIM nfreq : nfreq = 10000
	DIM nresolution : nresolution = 100
    temp = GPIOSETFUNC(CURR_SET_PWM,DIGITAL_OUT,PWM)
    temp = GPIOCONFIGPWM(nfreq,nresolution)                      //10kHz 1:100 resolution current set PWM
    //To set duty cycle -> change TX current: GPIOWRITE(CURR_SET_PWM, 0 to N) where N = 1 to 100 or 10000?  

    temp = GPIOSETFUNC(HAPTIC,DIGITAL_OUT,HIGH)          //HAPTICS will just be on/off not PWM. Active low.
    temp = GPIOSETFUNC(BUCK_ON,DIGITAL_OUT,HIGH)         
    temp = GPIOSETFUNC(TX_EN,DIGITAL_OUT,LOW) 
    temp = GPIOSETFUNC(RX_EN,DIGITAL_OUT,LOW)
    temp = GPIOSETFUNC(MOD,DIGITAL_OUT,LOW)              //unused with FE v2.0, set as low digital output.
    temp = GPIOSETFUNC(BLK_THRES_PWM,DIGITAL_OUT,LOW)    //unused with FE v2.0, set as low digital output.

    temp = GPIOSETFUNC(BLINK,DIGITAL_IN,0)               //unused with FE v2.0, set as digital input.
    temp = GPIOSETFUNC(PBSTAT,DIGITAL_IN,2) //note for the devkit, used 2, originally written as 0 though
    temp = GPIOSETFUNC(CHRG,DIGITAL_IN,0)
    temp = GPIOSETFUNC(SLOPE_P,DIGITAL_IN,0)           //Add deep sleep wake?
    temp = GPIOSETFUNC(SLOPE_N,DIGITAL_IN,0)           
    
    temp = GPIOSETFUNCEX(ENV_ADC,ANALOG_IN,"\15\0A\0A")          
    temp = GPIOSETFUNCEX(BAT_ADC,ANALOG_IN,"\14\0C\28")

    PRINT "\n IO Configured"
    
    // Set ADC scaling so max analog voltage * Scaling < 0.6V (ADC reference)
    //0x16 1/6 scaling
    //0x15 1/5 scaling
    //0x14 1/4 scaling
    //0x13 1/3 scaling
    //0x12 1/2 scaling
    //0x11 1/1 scaling (Unity)
    //0x21 2/1 scaling
    //0x41 4/1 scaling
    
    //0x08 8-bit ADC resolution
    //0x0A 10-bit ADC resolution
    //0x0C 12-bit ADC resolution

    //0x03 3 microseconds Acquisition time
    //0x05 5 microseconds
    //0x0A 10 microseconds
    //0x0F 15 microseconds
    //0x14 20 microseconds
    //0x28 40 microseconds
    
endsub 

sub HAPTICS(BYVAL PATTERN_TYPE AS INTEGER)   //input an integer to select the haptic pattern

    SELECT PATTERN_TYPE

        CASE 1     
            GPIOWRITE(HAPTIC,0)       //HAPTIC is active low!!!!
            DELAY_MS(200)
            GPIOWRITE(HAPTIC,1)
            DELAY_MS(200)
            GPIOWRITE(HAPTIC,0)
            DELAY_MS(200)
            GPIOWRITE(HAPTIC,1)
            DELAY_MS(400)
            GPIOWRITE(HAPTIC,0)
            DELAY_MS(400)
            GPIOWRITE(HAPTIC,1)
            PRINT "\n Haptics 1 finished"

        CASE 2
            GPIOWRITE(HAPTIC,0)
            DELAY_MS(200)
            GPIOWRITE(HAPTIC,1)
            DELAY_MS(200)
            GPIOWRITE(HAPTIC,0)
            DELAY_MS(400)
            GPIOWRITE(HAPTIC,1)
            DELAY_MS(400)
            GPIOWRITE(HAPTIC,0)
            DELAY_MS(200)
            GPIOWRITE(HAPTIC,1)
            DELAY_MS(200)
            GPIOWRITE(HAPTIC,0)
            DELAY_MS(400)
            GPIOWRITE(HAPTIC,1)
            PRINT "\n Haptics 2 finished"

            //add cases as required
                 
        CASE ELSE     
            PRINT "\n Not a valid haptics pattern"

    ENDSELECT

endsub

sub CANCEL_ALL_TIMERS() //cancels all timers
	dim i : i = 0
	FOR i = 0 to 7
		TimerCancel(i)
	NEXT
	print "\n all 8 timers cancelled \n"
endsub

//FSM STATE ROUTINES--------------------------------------------------------------

sub TURN_OFF_ROUTINE()
	CANCEL_ALL_TIMERS()
	print "\n TURN_OFF state start \n"
endsub

sub TURN_ON_ROUTINE()
	CANCEL_ALL_TIMERS()
	print "\n TURN_ON state start \n"
	IO_Config() //configure inputs 

endsub

sub BLE_CONNECT_ROUTINE()//(BYVAL BLE_TimeOut AS INTEGER)
	CANCEL_ALL_TIMERS()
	print "\n BLE_CONNECT state start \n"
    //TimerStart(0,180000,0)   //3 min search timer

    //configure BLE, check for saved MAC
    //if the timer times out, return a 0. BLE_TimeOut = 0 
	//exit state stop and reset timer

endsub  

sub PROXIMITY_DETECT_ROUTINE()
	print "\n PROXIMITY_DETECT state start \n"
endsub

function CALIBRATION_ROUTINE()
	CANCEL_ALL_TIMERS()
	dim CAL_STATUS as integer : CAL_STATUS = 1
	print "\n CALIBRATION state start \n"
	
	//calibration events, depending on result of this function CAL_PASS or CAL_FAIL will be called 
endfunc CAL_STATUS

sub CAL_PASS_ROUTINE()
	print" \n CAL_PASS state start \n"
endsub 

sub CAL_FAIL_ROUTINE()
	print "\n CAL_FAIL state start \n"
	Cal_Fail_Count = Cal_Fail_Count + 1
	IF Cal_Fail_Count < 3 THEN
		PROXIMITY_DETECT_ROUTINE()
	ELSEIF Cal_Fail_Count >= 3 THEN
		TURN_OFF_ROUTINE()
	ELSE
		print "\n CAL_FAIL_ROUTINE error with Cal_Fail_Count \n"
	ENDIF
endsub

sub CHECK_CAL(BYVAL CAL_STATUS AS INTEGER)
	IF CAL_STATUS == 1 then
		CAL_PASS_ROUTINE()
	ELSEIF CAL_STATUS == 0 then
		CAL_PASS_ROUTINE()
	ELSE
		print "\n Check_CAL error - neither pass or fail \n"
	ENDIF
endsub

sub LP_MODE_ROUTINE()
	CANCEL_ALL_TIMERS()
	print "\n LP_MODE state start \n"
	TimerStart (0,TARGET_BLINK_INTERVAL,1) // Reoccuring BLINK INTERVAL TIMER
	print "\n started target blink interval timer \n"
	TimerStart (1,LP_MODE_HOUSEKEEPING_INTERVAL, 1) // Reoccuring housekeeping timer
	print "\n started housekeeping interval timer \n"
	//waitevent
endsub 

sub HP_MODE_ROUTINE()
	CANCEL_ALL_TIMERS()
	print "\n HP_MODE state start \n"
endsub 

//Handlers---------------------------------------------------------------
function HNDLRBLEADVTIMEOUT()
	print "\n Advert stopped fromm timeout"
	print "\n Exiting..."
	//more advanced switches depending on timeout to be included
endfunc 0 //check if this should be 0

function CHANGE_MODE_HNDL()
    dim i : i = GpioRead(PBSTAT)	// Reading input value from button 3
    if i==0 then
		IF CHANGE_MODE_Flag == 0 THEN		
			CURRENT_STATE = CHANGE_MODE		// set  state to CHANGE_MODE
			TimerStart(2,15000,0) //change mode timer set to 15 seconds, record all button presses in these 15 seconds
			print "\n Change Mode Timer [2] Start - 15 seconds \n"
			CHANGE_MODE_Flag = 1
			print "\n change mode flag is now 1, should now record button presses \n"
			
		ELSE
			CHANGE_MODE_Counter = CHANGE_MODE_Counter + 1
			print "\n Change Mode Counter: "; CHANGE_MODE_Counter; "\n"
		ENDIF
		//print "\n change mode : button 3 pressed"
    elseif i==1 then
       // print "\n Button 3 released"
    endif
endfunc 1

function CHANGE_MODE_Timer_2_HNDL()
	if CHANGE_MODE_Counter == 1 then
		CURRENT_STATE = TURN_OFF
	elseif CHANGE_MODE_Counter == 2 then
		CURRENT_STATE = TURN_ON
	elseif CHANGE_MODE_Counter == 3 then
		CURRENT_STATE = MODE_HP
	elseif CHANGE_MODE_Counter == 4 then
		CURRENT_STATE = MODE_LP
	ELSE
		CURRENT_STATE = TURN_OFF
	ENDIF
		//if statements to determine state
	print " \n Change Mode Counter: "; CHANGE_MODE_Counter
	print " \n Current State: "; CURRENT_STATE; "\n"
	
	CHANGE_MODE_Flag=0
	CHANGE_MODE_Counter =0
	
	print "\n Change Mode Flag and Counter reset to 0 \n \n"
	
	SELECT CURRENT_STATE //select statement here is for debugging purposes, otherwise the routines could be added in if statements above
		CASE TURN_OFF
			TURN_OFF_ROUTINE()
		CASE TURN_ON
			TURN_ON_ROUTINE()
		CASE MODE_HP
			HP_MODE_ROUTINE()
		CASE MODE_LP
			LP_MODE_ROUTINE()
		CASE ELSE
			TURN_OFF_ROUTINE()
	ENDSELECT
endfunc 1

function TMR1_HNDL_TEMP()
	print "\ntimer 1 expired\n"
endfunc 1

//Main Program-----------------------------------------------------------


//rc = gpiosetfunc(PBSTAT,DIGITAL_IN,2)                //Sets Button 3 SIO as a digital in with a weak pull up resistor
//AssertRC(rc, 126)
rc = gpiobindevent(2,PBSTAT,1)              //Binds a gpio transition high or low to an event for button 3 - representing PBSTAT
AssertRC(rc, 142)

onevent evgpiochan2 call CHANGE_MODE_HNDL      //Detects when button 3 is pressed or released and calls the function
onevent EVTMR2 CALL CHANGE_MODE_Timer_2_HNDL  //Timer 2 which is associated with change mode button presses
onevent EVTMR1 CALL TMR1_HNDL_TEMP
// onevent EVBLE_ADV_TIMEOUT CALL HNDLRBLEADVTIMEOUT  //call BLEadverttimeout when ECBLE_ADV_TIMEOUT

TURN_ON_ROUTINE()
BLE_CONNECT_ROUTINE()
PROXIMITY_DETECT_ROUTINE()
CALIBRATION_STATUS = CALIBRATION_ROUTINE()
CHECK_CAL(CALIBRATION_STATUS)
IF CALIBRATION_STATUS == 1 THEN
	print "\n CALIBRATION STATUS = 1, START LP_MODE \n"
	LP_MODE_ROUTINE()
ENDIF


print "\n waitevent \n"
WAITEVENT 
print "\n after final waitevent, broke, now in interactive mode \n"